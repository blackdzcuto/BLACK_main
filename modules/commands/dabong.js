const doi1 = ["Vi·ªát Nam", "Th√°i Lan", "Indo","L√†o","Nh·∫≠t B·∫£n","Trung Qu·ªëc","H√†n Qu·ªëc","Nga","UZBEKISTAN","IRAN"]
//t·ª± th√™m ai g·∫£nh ƒë√¢u
const random1 = doi1[Math.floor(Math.random() * doi1.length)]
const random2 = doi1[Math.floor(Math.random() * doi1.length)]
if (random2 == random1) { return }
module.exports.config = {
  name: "dabong",
  version: "1.0.0",
  hasPermssion: 0,
  credits: "Araxy ?",
  description: "idk",
  commandCategory: "Game",
  usages: "[create/join/leave/start/end]",
  cooldowns: 0
};
module.exports.handleEvent = async function({
  api,
  event,
  Currencies
}) {
  const fs = require("fs-extra")
  const axios = require("axios")
  const {
    threadID,
    messageID,
    body,
    senderID
  } = event;
  if (!body) return;
  async function checkMoney(senderID, maxMoney) {
        var i, w;
        i = (await Currencies.getData(senderID)) || {};
        w = i.money || 0
        if (w < parseInt(maxMoney)) return false;
        else return true;
    }
  /*
  async function hiep1(doi1, doi2) {
    var doi1 = Math.floor(Math.random() * 9)
    var doi2 = Math.floor(Math.random() * 9)
    var msg1 = {
      body: `¬ª K·∫øt qu·∫£ Hi·ªáp 1 ${doi1} : ${doi2}`
    }
  }
  async function hiep2(doi1h2, doi2h2) {
    var doi1h2 = Math.floor(Math.random() * 9)
    var doi2h2 = Math.floor(Math.random() * 9)
    var msg2 = {
      body: `¬ª K·∫øt qu·∫£ Hi·ªáp 2 ${doi1h2} : ${doi2h2}`
    }
  }*/
  const choosee = body.split(" ")
  var doi1 = Math.floor(Math.random() * 5)
  var doi2 = Math.floor(Math.random() * 5)
  var doi1h2 = Math.floor(Math.random() * 5)
  var doi2h2 = Math.floor(Math.random() * 5)
  const tong1 = doi1 + doi1h2
  const tong2 = doi2 + doi2h2
  if (tong1 > tong2) {
    var araxy = random1
  } else if( tong1 < tong2 ) {
    var araxy = random2
  } else{
    var luanluu = [random1, random2]
    var doithang = luanluu[Math.floor(Math.random() * luanluu.length)]
    var araxy = doithang
  }
  var ketqua = [araxy]
  const typ = ["d1", "d2"]
  if (typ.includes(choosee[0]) == true) {
    if (!global.dabanh) return
    const gameThread = global.dabanh.get(threadID) || {};
    if (!gameThread) return;
    if (gameThread.start != true) return;
    if (!choosee[1]) return api.sendMessage('Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn c∆∞·ª£c!', threadID, messageID);
    if (await checkMoney(senderID, choosee[1]) == false) return api.sendMessage('B·∫°n kh√¥ng ƒë·ªß ti·ªÅn c∆∞·ª£c!', threadID, messageID)
    else {
      var playerGame = gameThread.player.length
      if (!gameThread.player.find(i => i.userID == senderID)) return;

      else {
        var s, q;
        var s = gameThread.player.findIndex(i => i.userID == senderID);
        var q = gameThread.player[s];
        if (q.choose.status == true) return api.sendMessage('‚ö† B·∫°n ƒë√£ ch·ªçn r·ªìi kh√¥ng th·ªÉ ch·ªçn l·∫°i!', threadID, messageID);
        else {
          if (typ.includes(choosee[0]) == true) {
            if(choosee[0] == "d1"){
              var link = random1
            } else if(choosee[0] == "d2") {
              var link = random2
            }
            gameThread.player.splice(s, 1);
            gameThread.player.push({
              name: q.name,
              userID: senderID,
              choose: {
                status: true,
                msg: link,
                money: parseInt(choosee[1])
              }
            });
            api.sendMessage(`üë§ Ng∆∞·ªùi ch∆°i ${q.name} ƒë√£ ch·ªçn ${choosee[0]} v·ªõi m·ª©c ƒë·∫∑t c∆∞·ª£c ${choosee[1]}$`, threadID, messageID);
          }
          else  {
            gameThread.player.splice(s, 1);
            gameThread.player.push({ name: q.name, userID: senderID, choose: { status: true, msg: random2 } });
            api.sendMessage('üë§ Ng∆∞·ªùi ch∆°i ' + q.name + `  ƒê√£ Ch·ªçn ${choosee[0].toLowerCase()}`, threadID, messageID);
          }
          var vv = 0,
            vvv = gameThread.player.length;
          for (var c of gameThread.player) {
            if (c.choose.status == true) vv++;
          }
          if (vv == vvv) {
            var msg1 = {
              body: "¬ª ƒêang ƒê√° Hi·ªáp 1"
            }
            api.sendMessage(msg1, threadID, async (error, info) => {
              await new Promise(resolve => setTimeout(resolve, 3000));
            }, messageID);
            api.sendMessage(`Hi·ªáp 1 ƒêang C√≥ T·ª∑ S·ªë L√† ${doi1} : ${doi2}`, threadID, async (error, info) => {
              await new Promise(resolve => setTimeout(resolve, 3000));
              api.sendMessage(`Hi·ªáp 2 ƒêang C√≥ T·ª∑ S·ªë L√† ${doi1h2} : ${doi2h2}`, threadID, async (error, info) => {
                await new Promise(resolve => setTimeout(resolve, 3000));
              })
                api.sendMessage(`T·ªïng T·ª∑ S·ªë 2 Hi·ªáp L√† ${tong1} : ${tong2} v√† ƒë·ªôi th·∫Øng l√† ${araxy}`, threadID, async (error, info) => {
                await new Promise(resolve => setTimeout(resolve, 3000));
            }, messageID);
            await new Promise(resolve => setTimeout(resolve, 3000));
            await checkWin(ketqua, gameThread);
          })} else return;
        }
      }
    }
    async function checkWin(ketqua, gameThread) {
      var checkwin = gameThread.player.filter(i => ketqua.includes(i.choose.msg) == true)
      var checklose = gameThread.player.filter(i => ketqua.includes(i.choose.msg) == false)
      var msg;
      if (checkwin.length != 0) {
        msg = '[====NH·ªÆNG NG∆Ø·ªúI TH·∫ÆNG CU·ªòC====]\n'
        for (let i of checkwin) {
          var checkItem = ketqua.filter(a => a == i.choose.msg)
          console.log(checkItem)
          await Currencies.increaseMoney(i.userID, parseInt(i.choose.money) * checkItem.length);
          msg += `${i.name} ƒë·∫∑t ${i.choose.msg} + ${parseInt(i.choose.money) * checkItem.length}$\n`
        }
      }
      if (checklose.length != 0) {
        msg += '\n[====NH·ªÆNG NG∆Ø·ªúI THUA CU·ªòC====]\n'
        for (let i of checklose) {
          await Currencies.decreaseMoney(i.userID, parseInt(i.choose.money));
          msg += `${i.name} ƒë·∫∑t ${i.choose.msg} - ${i.choose.money}$\n`
        }
      }
      global.dabanh.delete(threadID);
      return api.sendMessage(msg, threadID, messageID);
    }
  }
}
module.exports.run = async function({ api, event, args, Threads, Users, Currencies }) {
  try {
    if (!global.dabanh) global.dabanh = new Map();
    const { threadID, messageID, senderID } = event;
    var gameThread = global.dabanh.get(threadID);
    switch (args[0]) {
      case "create":
      case "new":
      case "-c": {
        if (await checkMoney(senderID, 50) == false) return api.sendMessage('Y√™u c·∫ßu c√≥ √≠t nh·∫•t 50$ ƒë·ªÉ tham gia!', threadID, messageID)
        if (global.dabanh.has(threadID)) return api.sendMessage('‚ö† Nh√≥m n√†y ƒë√£ ƒë∆∞·ª£c m·ªü b√†n game!', threadID, messageID);
        var name = await Users.getNameUser(senderID);
        global.dabanh.set(threadID, {
          box: threadID,
          start: false,
          author: senderID,
          player: [{
            name,
            userID: senderID,
            choose: {
              status: false,
              msg: null,
              money: null
            }
          }]
        });
        return api.sendMessage(`T·∫°o b√†n ch∆°i dabanh th√†nh c√¥ng!\n Gi·ªØa 2 ƒê·ªôi ${random1} vs ${random2}\n...dabanh join\n...dabanh start\n...dabanh leave\n...dabanh end`, threadID, messageID);
        break;
      }
      case "join":
      case "-j": {
        if (await checkMoney(senderID, 50) == false) return api.sendMessage('Y√™u c·∫ßu c√≥ √≠t nh·∫•t 50$ ƒë·ªÉ tham gia!', threadID, messageID)
        if (!global.dabanh.has(threadID)) return api.sendMessage('Kh√¥ng c√≥ b√†n dabanh n√†o ƒë·ªÉ tham gia!', threadID, messageID);
        if (gameThread.start == true) return api.sendMessage('Game ƒë√£ b·∫Øt ƒë·∫ßu tr∆∞·ªõc ƒë√≥!', threadID, messageID);
        if (gameThread.player.find(i => i.userID == senderID)) return api.sendMessage('B·∫°n ƒë√£ tham gia tr∆∞·ªõc ƒë√≥ r·ªìi!', threadID, messageID);
        var name = await Users.getNameUser(senderID);
        gameThread.player.push({
          name,
          userID: senderID,
          choose: {
            stats: false,
            msg: null,
            money: null
          }
        });
        global.dabanh.set(threadID, gameThread);
        return api.sendMessage('Tham gia th√†nh c√¥ng!', threadID, messageID);
        break;
      }
      case "leave":
      case "-l'": {
        if (!global.dabanh.has(threadID)) return api.sendMessage('Kh√¥ng c√≥ b√†n dabanh n√†o ƒë·ªÉ r·ªùi kh·ªèi!', threadID, messageID);
        if (!gameThread.player.find(i => i.userID == senderID)) return api.sendMessage('B·∫°n ch∆∞a tham gia n√™n kh√¥ng th·ªÉ r·ªùi!', threadID, messageID);
        if (gameThread.start == true) return api.sendMessage('Game ƒë√£ b·∫Øt ƒë·∫ßu r·ªìi, h∆°i mu·ªôn nha!', threadID, messageID);
        if (gameThread.author == senderID) {
          global.dabanh.delete(threadID);
          var name = await Users.getNameUser(senderID);
          return api.sendMessage('‚ö† B√†n game ƒë√£ ƒë∆∞·ª£c b·∫Øt ƒë·∫ßu kh√¥ng th·ªÉ r·ªùi!', threadID, messageID);
        } else {
          gameThread.player.splice(gameThread.player.findIndex(i => i.userID == senderID), 1);
          global.dabanh.set(threadID, gameThread);
          var name = await Users.getNameUser(senderID);
          api.sendMessage('R·ªùi th√†nh c√¥ng!', threadID, messageID);
          return api.sendMessage(`${name} ƒë√£ r·ªùi kh·ªèi, s·ªë l∆∞·ª£ng ng∆∞·ªùi ch∆°i c√≤n l·∫°i l√† ${gameThread.player.length}`, threadID);
        }
        break;
      }
      case "start":
      case "-s": {
        if (!gameThread) return api.sendMessage('Kh√¥ng c√≥ b√†n dabanh n√†o ƒë·ªÉ b·∫Øt ƒë·∫ßu!', threadID, messageID);
        if (gameThread.author != senderID) return api.sendMessage('Ch·ªâ c√≥ ng∆∞·ªùi t·∫°o m·ªõi c√≥ th·ªÉ b·∫Øt ƒë·∫ßu!', threadID, messageID);
        if (gameThread.player.length <= 1) return api.sendMessage('S·ªë l∆∞·ª£ng ng∆∞·ªùi ch∆°i ph·∫£i t·ª´ 2 tr·ªü l√™n!', threadID, messageID);
        if (gameThread.start == true) return api.sendMessage('Game ƒë√£ b·∫Øt ƒë·∫ßu tr∆∞·ªõc ƒë√≥', threadID, messageID);
        gameThread.start = true;
        global.dabanh.set(threadID, gameThread);
        return api.sendMessage(`con c·∫∑c nh·ªõ 2 ƒë·ªôi l√† ${random1} v√† ${random2}`, threadID);
        break;
      }
      case "end":
      case "-e": {
        if (!gameThread) return api.sendMessage('Kh√¥ng c√≥ b√†n dabanh n√†o ƒë·ªÉ k·∫øt th√∫c!', threadID, messageID);
        if (gameThread.author != senderID) return api.sendMessage('Ch·ªâ c√≥ ng∆∞·ªùi t·∫°o m·ªõi c√≥ th·ªÉ k·∫øt th√∫c!', threadID, messageID);
        global.dabanh.delete(threadID);
        return api.sendMessage(`K·∫øt th√∫c th√†nh c√¥ng`, threadID, messageID);
        break;
      }
      default: {
        return api.sendMessage("‚ö† BODY:\n- create/new/-c: T·∫°o b√†n ch∆°i dabanh\n- join/-j: Tham gia v√†o b√†n dabanh\n- leave/-l: R·ªùi kh·ªèi b√†n dabanh\n- start/-s: B·∫Øt ƒë·∫ßu b√†n dabanh\n- end/-e: K·∫øt th√∫c b√†n dabanh", threadID, messageID);
      }
    }
  } catch (err) {
    return api.sendMessage(getText("error", err), event.threadID, event.messageID);
  }
  async function checkMoney(senderID, maxMoney) {
    var i, w;
    i = (await Currencies.getData(senderID)) || {};
    w = i.money || 0
    if (w < parseInt(maxMoney)) return false;
    else return true;
  }
}